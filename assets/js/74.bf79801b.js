(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{676:function(v,_,l){"use strict";l.r(_);var e=l(11),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h2",{attrs:{id:"代码优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#代码优化"}},[v._v("#")]),v._v(" 代码优化")]),v._v(" "),l("ul",[l("li",[v._v("无用代码消除: 例如 UglifyJs，它就会帮我们在生产环境中删除不可能被执行的代码")]),v._v(" "),l("li",[v._v('摇树优化 (Tree-shaking): 通过工具 "摇" 我们打包后的 js 代码，将没有使用到的无用代码 "摇" 下来 (删除)。即 消除那些被 引用了但未被使用 的模块代码\n'),l("ul",[l("li",[l("strong",[v._v("原理")]),v._v(": 由于是在编译时优化，因此最基本的前提就是语法的静态分析，"),l("strong",[v._v("ES6的模块机制")]),v._v(" 提供了这种可能性。不需要运行时，便可进行代码字面上的静态分析，确定相应的依赖关系")]),v._v(" "),l("li",[l("strong",[v._v("问题")]),v._v(": 具有 "),l("strong",[v._v("副作用")]),v._v(" 的函数无法被 tree-shaking\n"),l("ul",[l("li",[v._v("在引用一些第三方库，需要去观察其引入的代码量是不是符合预期")]),v._v(" "),l("li",[v._v("尽量写纯函数，减少函数的副作用")]),v._v(" "),l("li",[v._v("可使用 webpack-deep-scope-plugin，可以进行作用域分析，减少此类情况的发生，但仍需要注意")])])])])])]),v._v(" "),l("h2",{attrs:{id:"code-spliting"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#code-spliting"}},[v._v("#")]),v._v(" code-spliting")]),v._v(" "),l("p",[l("strong",[v._v("代码分割")]),v._v(" 技术，将代码分割成多份进行 "),l("strong",[v._v("懒加载")]),v._v(" 或 "),l("strong",[v._v("异步加载")]),v._v("，避免打包成一份后导致体积过大，影响页面的首屏加载")]),v._v(" "),l("ul",[l("li",[v._v("Webpack 中使用 SplitChunksPlugin 进行拆分")]),v._v(" "),l("li",[v._v("按 "),l("strong",[v._v("页面")]),v._v(" 拆分: 不同页面打包成不同的文件")]),v._v(" "),l("li",[v._v("按 "),l("strong",[v._v("功能")]),v._v(" 拆分:\n"),l("ul",[l("li",[v._v("将类似于播放器，计算库等大模块进行拆分后再懒加载引入")]),v._v(" "),l("li",[v._v("提取复用的业务代码，减少冗余代码")])])]),v._v(" "),l("li",[v._v("按 "),l("strong",[v._v("文件修改频率")]),v._v(" 拆分: 将第三方库等不常修改的代码单独打包，而且不改变其文件 hash 值，能最大化运用浏览器的缓存")])]),v._v(" "),l("h2",{attrs:{id:"scope-hoisting"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#scope-hoisting"}},[v._v("#")]),v._v(" scope hoisting")]),v._v(" "),l("p",[v._v("作用域提升: 将分散的模块划分到同一个作用域中，避免了代码的重复引入，有效减少打包后的代码体积和运行时的内存损耗")]),v._v(" "),l("h2",{attrs:{id:"编译性能优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#编译性能优化"}},[v._v("#")]),v._v(" 编译性能优化")]),v._v(" "),l("ul",[l("li",[v._v("升级至 最新 版本的 webpack，能有效提升编译性能；")]),v._v(" "),l("li",[v._v("使用 dev-server / 模块热替换 (HMR) 提升开发体验；")]),v._v(" "),l("li",[v._v("监听文件变动 忽略 node_modules 目录能有效提高监听时的编译效率；")]),v._v(" "),l("li",[v._v("缩小编译范围:\n"),l("ul",[l("li",[v._v("modules: 指定模块路径，减少递归搜索；")]),v._v(" "),l("li",[v._v("mainFields: 指定入口文件描述字段，减少搜索；")]),v._v(" "),l("li",[v._v("noParse: 避免对非模块化文件的加载；")]),v._v(" "),l("li",[v._v("includes/exclude: 指定搜索范围/排除不必要的搜索范围；")]),v._v(" "),l("li",[v._v("alias: 缓存目录，避免重复寻址；")])])]),v._v(" "),l("li",[v._v("babel-loader:\n"),l("ul",[l("li",[v._v("忽略node_moudles，避免编译第三方库中已经被编译过的代码；")]),v._v(" "),l("li",[v._v("使用cacheDirectory，可以缓存编译结果，避免多次重复编译；")])])]),v._v(" "),l("li",[v._v("多进程并发:\n"),l("ul",[l("li",[v._v("webpack-parallel-uglify-plugin: 可多进程并发压缩 js 文件，提高压缩速度；")]),v._v(" "),l("li",[v._v("HappyPack: 多进程并发文件的 Loader 解析；")])])]),v._v(" "),l("li",[v._v("第三方库模块缓存:\n"),l("ul",[l("li",[v._v("DLLPlugin 和 DLLReferencePlugin 可以提前进行打包并缓存，避免每次都重新编译；")])])]),v._v(" "),l("li",[v._v("使用分析:\n"),l("ul",[l("li",[v._v("Webpack Analyse / webpack-bundle-analyzer 对打包后的文件进行分析，寻找可优化的地方；")]),v._v(" "),l("li",[v._v("配置profile：true，对各个编译阶段耗时进行监控，寻找耗时最多的地方；")])])]),v._v(" "),l("li",[v._v("source-map:\n"),l("ul",[l("li",[v._v("开发: cheap-module-eval-source-map；")]),v._v(" "),l("li",[v._v("生产: hidden-source-map")])])])])])}),[],!1,null,null,null);_.default=i.exports}}]);