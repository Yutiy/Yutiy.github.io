(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{686:function(v,_,t){"use strict";t.r(_);var e=t(11),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"一、强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、强缓存"}},[v._v("#")]),v._v(" 一、强缓存")]),v._v(" "),t("p",[v._v("浏览器中的缓存作用分为两种情况，一种是需要发送HTTP请求，一种是不需要发送。")]),v._v(" "),t("p",[v._v("首先是检查强缓存，这个阶段不需要发送HTTP请求。那通过那些字段来检测呢?")]),v._v(" "),t("ul",[t("li",[v._v("HTTP/1.0: "),t("strong",[v._v("Expires")])]),v._v(" "),t("li",[v._v("HTTP/1.1: "),t("strong",[v._v("Cache-Control")])])]),v._v(" "),t("h3",{attrs:{id:"expires"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),t("p",[t("code",[v._v("Expires")]),v._v(" 即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。比如下面这样:")]),v._v(" "),t("blockquote",[t("p",[v._v("Expires: Wed, 25 Jun 2020 08:41:00 GMT")])]),v._v(" "),t("p",[v._v("表示资源在 2020年6月25号8点41分 过期，过期了就得向服务端发请求。")]),v._v(" "),t("p",[v._v("这个方式看上去没什么问题，合情合理，但其实潜藏了一个问题，那就是"),t("strong",[v._v("服务器的时间和浏览器的时间可能并不一致，那服务器返回的这个过期时间可能就是不准确的")]),v._v("。因此这种方式很快在后来的HTTP1.1版本中被抛弃了。")]),v._v(" "),t("h3",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-Control")]),v._v(" "),t("p",[v._v("Cache-Control 和 Expires 本质的不同在于它并没有采用具体的过期时间点这个方式，而是采用过期时长来控制缓存，对应的字段是max-age。比如这个例子:")]),v._v(" "),t("blockquote",[t("p",[v._v("Cache-Control:max-age=3600")])]),v._v(" "),t("p",[v._v("代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。")]),v._v(" "),t("p",[v._v("它其实可以组合非常多的指令，完成更多场景的缓存判断, 将一些关键的属性列举如下:")]),v._v(" "),t("ul",[t("li",[v._v("public: 客户端和代理服务器都可以缓存。因为一个请求可能要经过不同的代理服务器最后才到达目标服务器，那么结果就是不仅仅浏览器可以缓存数据，中间的任何代理节点都可以进行缓存。")]),v._v(" "),t("li",[v._v("private： 这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。")]),v._v(" "),t("li",[v._v("no-cache: 跳过当前的强缓存，发送HTTP请求，即直接进入协商缓存阶段。")]),v._v(" "),t("li",[v._v("no-store：非常粗暴，不进行任何形式的缓存。")]),v._v(" "),t("li",[v._v("s-maxage：这和max-age长得比较像，但是区别在于s-maxage是针对代理服务器的缓存时间。")]),v._v(" "),t("li",[v._v("must-revalidate: 是缓存就会有过期的时候，加上这个字段一旦缓存过期，就必须回到源服务器验证。")])]),v._v(" "),t("p",[v._v("值得注意的是，当 "),t("strong",[v._v("Expires")]),v._v("和"),t("strong",[v._v("Cache-Control")]),v._v(" 同时存在的时候，"),t("strong",[v._v("Cache-Control")]),v._v("会优先考虑，另外当"),t("code",[v._v("强缓存")]),v._v("失效时就会进入第二级屏障 -- "),t("strong",[v._v("协商缓存")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"二、协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、协商缓存"}},[v._v("#")]),v._v(" 二、协商缓存")]),v._v(" "),t("p",[v._v("强缓存失效之后，浏览器在请求头中携带相应的 "),t("code",[v._v("缓存tag")]),v._v(" 来向服务器发请求，由服务器根据这个 tag，来决定是否使用缓存，这就是协商缓存。")]),v._v(" "),t("p",[v._v("具体来说，这样的缓存 tag 分为两种: "),t("strong",[v._v("Last-Modified")]),v._v(" 和 "),t("strong",[v._v("ETag")]),v._v("。这两者各有优劣，并不存在谁对谁有绝对的优势，跟上面强缓存的两个 tag 不一样。")]),v._v(" "),t("h3",{attrs:{id:"last-modified"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[v._v("#")]),v._v(" Last-Modified")]),v._v(" "),t("p",[v._v("即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，"),t("strong",[v._v("适合不重要的量大的资源")]),v._v("。")]),v._v(" "),t("p",[v._v("浏览器接收到后，如果再次请求，会在请求头中携带 "),t("code",[v._v("If-Modified-Since")]),v._v(" 字段，这个字段的值也就是服务器传来的最后修改时间。")]),v._v(" "),t("p",[v._v("服务器拿到请求头中的 If-Modified-Since 的字段后，其实会和这个服务器中"),t("code",[v._v("该资源的最后修改时间")]),v._v("对比:")]),v._v(" "),t("ul",[t("li",[v._v("如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。")]),v._v(" "),t("li",[v._v("否则返回304，告诉浏览器直接用缓存。")])]),v._v(" "),t("h3",{attrs:{id:"etag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[v._v("#")]),v._v(" ETag")]),v._v(" "),t("p",[t("code",[v._v("ETag")]),v._v(" 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变，因此"),t("strong",[v._v("适合重要量小的资源")]),v._v("。服务器通过响应头把这个值给浏览器。")]),v._v(" "),t("p",[v._v("浏览器接收到 "),t("code",[v._v("ETag")]),v._v(" 的值，会在下次请求时，将这个值作为 "),t("strong",[v._v("If-None-Match")]),v._v(" 这个字段的内容，并放到请求头中，然后发给服务器。")]),v._v(" "),t("p",[v._v("服务器接收到 "),t("strong",[v._v("If-None-Match")]),v._v(" 后，会跟服务器上该资源的 "),t("strong",[v._v("ETag")]),v._v(" 进行比对:")]),v._v(" "),t("ul",[t("li",[v._v("如果两者不一样，说明要更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。")]),v._v(" "),t("li",[v._v("否则返回304，告诉浏览器直接用缓存。")])]),v._v(" "),t("h3",{attrs:{id:"两者对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两者对比"}},[v._v("#")]),v._v(" 两者对比")]),v._v(" "),t("ol",[t("li",[v._v("在"),t("code",[v._v("精准度")]),v._v("上，ETag 优于 Last-Modified。优于 ETag 是按照内容给资源上标识，因此能准确感知资源的变化。而 Last-Modified 就不一样了，它在一些特殊的情况并不能准确感知资源变化，主要有两种情况:")])]),v._v(" "),t("ul",[t("li",[v._v("编辑了资源文件，但是文件内容并没有更改，这样也会造成缓存失效。")]),v._v(" "),t("li",[v._v("Last-Modified 能够感知的单位时间是秒，如果文件在 1 秒内改变了多次，那么这时候的 Last-Modified 并没有体现出修改了。")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("在"),t("code",[v._v("性能")]),v._v("上，Last-Modified 优于 ETag，也很简单理解，Last-Modified 仅仅只是记录一个时间点，而 Etag 需要根据文件的具体内容生成哈希值。")])]),v._v(" "),t("p",[v._v("另外，如果两种方式都支持的话，服务器会优先考虑 ETag。")]),v._v(" "),t("h2",{attrs:{id:"缓存位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[v._v("#")]),v._v(" 缓存位置")]),v._v(" "),t("p",[v._v("前面我们已经提到，当强缓存命中或者协商缓存中服务器返回 304 的时候，我们直接从缓存中获取资源。那这些资源究竟缓存在什么位置呢？")]),v._v(" "),t("p",[t("strong",[v._v("Service Worker")])]),v._v(" "),t("p",[v._v("Service Worker 借鉴了 Web Worker 的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如离线缓存、消息推送和网络代理等功能。其中的离线缓存就是 Service Worker Cache。")]),v._v(" "),t("p",[v._v("Service Worker 同时也是 PWA 的重要实现机制，关于它的细节和特性，将会在后面的 PWA 的分享中详细介绍。")]),v._v(" "),t("p",[t("strong",[v._v("Memory Cache 和 Disk Cache")])]),v._v(" "),t("p",[t("code",[v._v("Memory Cache")]),v._v(" 指的是内存缓存，从效率上讲它是最快的。但是从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。")]),v._v(" "),t("p",[t("code",[v._v("Disk Cache")]),v._v(" 就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。")]),v._v(" "),t("p",[v._v("那现在问题来了，既然两者各有优劣，那浏览器如何决定将资源放进内存还是硬盘呢？主要策略如下：")]),v._v(" "),t("ul",[t("li",[v._v("比较大的JS、CSS文件会直接被丢进磁盘，反之丢进内存")]),v._v(" "),t("li",[v._v("内存使用率比较高的时候，文件优先进入磁盘")])]),v._v(" "),t("p",[t("strong",[v._v("Push Cache")])]),v._v(" "),t("p",[v._v("即推送缓存，这是浏览器缓存的最后一道防线。它是 HTTP/2 中的内容，虽然现在应用的并不广泛，但随着 HTTP/2 的推广，它的应用越来越广泛。"),t("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[v._v("扩展文章"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=a.exports}}]);